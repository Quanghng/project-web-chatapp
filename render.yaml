# render.yaml
# Place this file at the root of your repository (e.g., project-web-chatapp/render.yaml)

services:
  # ----------------------------------------------------
  # NESTJS BACKEND SERVICE
  # ----------------------------------------------------
  - type: web # 'web' for public access (API accessible from Frontend and direct API calls)
    name: nestjs
    env: docker # Using 'node' env means Render handles Node.js specifics, but still allows Dockerfile
    rootDir: ./backend # Path to your backend source code
    dockerfilePath: Dockerfile # Path to Dockerfile relative to rootDir
    startCommand: ./start.sh # This is the CMD from your Dockerfile
    docker: 
      ports:
        - 3333 # The internal port your NestJS app listens on
        - 5555 # Keep this if you want Prisma Studio or other tools to access it publicly
      healthCheckPath: /docs
    envVars:
      - key: REDIS_HOST
        value: redis
      - key: REDIS_PORT
        value: 6379
      - key: POSTGRES_HOST
        value: postgres
      - key: POSTGRES_PORT
        value: 5432
      - key: RABBITMQ_HOST
        value: rabbitmq
      - key: RABBITMQ_PORT
        value: 5672
      - key: DATABASE_URL
        value: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/chatapp?schema=public
      - key: PORT
        value: 3333
      - key: FRONTEND_URL
        value: ${frontend.url}
      - key: FRONTEND_DOMAIN
        value: ${frontend.hostname}
      - key: RABBITMQ_URL
        value: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT}
      - key: JWT_ACCESS_TOKEN_SECRET
      - key: JWT_REFRESH_TOKEN_SECRET
      - key: CSRF_SECRET
      - key: CSRF_COOKIE_NAME
      - key: TOKEN_COOKIE_MODE
      - key: NODE_ENV
      - key: POSTGRES_USER
      - key: POSTGRES_PASSWORD
      - key: RABBITMQ_USER
      - key: RABBITMQ_PASSWORD

  # ----------------------------------------------------
  # POSTGRESQL DATABASE SERVICE
  # ----------------------------------------------------
  - type: pserv
    name: postgres
    env: docker
    docker: 
      image: postgres:16.0 
      healthCheckPath: /
      disks:
        - name: pgdata
          path: /var/lib/postgresql/data
    envVars:
      - key: POSTGRES_USER
      - key: POSTGRES_PASSWORD
      - key: POSTGRES_DB
        value: chatapp

  # ----------------------------------------------------
  # RABBITMQ MESSAGE BROKER SERVICE
  # ----------------------------------------------------
  - type: pserv
    name: rabbitmq
    env: docker
    docker: 
      image: rabbitmq:3-management 
      healthCheckPath: / # Or a specific management path if rabbitmq-diagnostics can expose one via HTTP
    envVars:
      - key: RABBITMQ_DEFAULT_USER
      - key: RABBITMQ_DEFAULT_PASS

  # ----------------------------------------------------
  # REDIS CACHE/BROKER SERVICE
  # ----------------------------------------------------
  - type: pserv
    name: redis
    env: docker
    docker: 
      image: redis:7 
      healthCheckPath: / # Redis health checks are typically direct command, so this might be tricky
                         # You can likely remove this healthCheckPath for redis if Render handles it internally
      disks: 
        - name: redis-data
          path: /data

  # ----------------------------------------------------
  # REACT FRONTEND SERVICE
  # ----------------------------------------------------
  - type: web
    name: frontend
    env: docker
    rootDir: ./frontend
    dockerfilePath: Dockerfile
    buildCommand: npm install && npm run build
    startCommand: nginx -g "daemon off;"
    docker: 
      ports:
        - 80
    envVars:
      - key: VITE_API_BASE_URL
        value: /api/v1
      - key: VITE_GRAPHQL_HTTP_URL
        value: /graphql