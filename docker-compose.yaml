services:
  # ----------------------------------------------------
  # NESTJS BACKEND SERVICE
  # ----------------------------------------------------
  nestjs:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nestjs
    depends_on:
      rabbitmq: 
        condition: service_healthy # Wait for the healthcheck to pass
      redis: 
        condition: service_healthy
      postgres: 
        condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/chatapp?schema=public
      - PORT=3333
      - FRONTEND_URL=http://localhost # For CORS
      - FRONTEND_DOMAIN=localhost 
      - JWT_ACCESS_TOKEN_SECRET=${JWT_ACCESS_TOKEN_SECRET} 
      - JWT_REFRESH_TOKEN_SECRET=${JWT_REFRESH_TOKEN_SECRET}
      - CSRF_SECRET=${CSRF_SECRET}
      - CSRF_COOKIE_NAME=${CSRF_COOKIE_NAME}
      - TOKEN_COOKIE_MODE=${TOKEN_COOKIE_MODE}
      - NODE_ENV=${NODE_ENV}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@${RABBITMQ_HOST}:${RABBITMQ_PORT} #
    env_file:
      - ./.env
    ports:
      - 3333:3333
      - 5555:5555
    networks:
      - chatapp
    # Add a restart policy to handle initial connection failures robustly
    restart: unless-stopped
    healthcheck: 
      test: ["CMD", "nc", "-z", "localhost", "3333"] 
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Give the NestJS app some time to fully start before checking

  # ----------------------------------------------------
  # POSTGRESQL DATABASE SERVICE
  # ----------------------------------------------------
  postgres:
    image: postgres:16.0
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: chatapp
    ports:
      - "5432:5432"
    networks:
      - chatapp
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d chatapp"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----------------------------------------------------
  # RABBITMQ MESSAGE BROKER SERVICE
  # ----------------------------------------------------
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      - chatapp
    configs:
      - source: rabbitmq-plugins
        target: /etc/rabbitmq/enabled_plugins
    volumes:
      - rabbitmq-lib:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq
    healthcheck: 
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----------------------------------------------------
  # REDIS CACHE/BROKER SERVICE
  # ----------------------------------------------------
  redis:
    image: redis:7
    container_name: redis
    restart: always
    networks:
      - chatapp
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ----------------------------------------------------
  # REACT FRONTEND SERVICE
  # ----------------------------------------------------
  frontend:
    build:
      context: ./frontend 
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - 80:80 # Map host port 80 to container port 80 (Nginx default)
    networks:
      - chatapp
    depends_on:
      nestjs: # Frontend depends on backend for API calls
        condition: service_healthy 
    restart: unless-stopped

# ----------------------------------------------------
# SHARED CONFIGURATIONS
# ----------------------------------------------------
configs:
  rabbitmq-plugins:
    content: "[rabbitmq_management]."

# ----------------------------------------------------
# NAMED VOLUMES FOR PERSISTENT DATA
# ----------------------------------------------------
volumes:
  rabbitmq-lib:
    driver: local
  rabbitmq-log:
    driver: local
  redis-data:
    driver: local

# ----------------------------------------------------
# NETWORKS FOR INTER-SERVICE COMMUNICATION
# ----------------------------------------------------
networks:
  chatapp:
